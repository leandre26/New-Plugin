/*
  ____                                   _             _       
 / ___|  ___  _   _ _ __ ___ ___   _ __ | |_   _  __ _(_)_ __  
 \___ \ / _ \| | | | '__/ __/ _ \ | '_ \| | | | |/ _` | | '_ \ 
  ___) | (_) | |_| | | | (_|  __/ | |_) | | |_| | (_| | | | | |
 |____/ \___/ \__,_|_|  \___\___| | .__/|_|\__,_|\__, |_|_| |_|
                                  |_|            |___/         
# A Template for TuiPlugin, a Source Plugin
# Generated by the command: plugin -t source -d tui_plugin TUI
# Hostname: Fram-IV.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2024-08-07T13:56:04.950+0200
# NOTICE: MADS Version 1.0.2
*/
// Mandatory included headers
#include <source.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
// other includes as needed here
#include <ftxui/screen/screen.hpp>
#include <ftxui/component/component.hpp>
#include "ftxui/component/loop.hpp"
#include <thread>

#include "tui_screen.hpp"


// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "tui"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;
using namespace chrono_literals;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class TuiPlugin : public Source<json> {

public:

  string kind() override { return PLUGIN_NAME; }

  return_type get_output(json &out,
                         std::vector<unsigned char> *blob = nullptr) override {
    out.clear();
    if (!_agent_id.empty()) out["agent_id"] = _agent_id;
    _loop->RunOnce();
    if (_loop->HasQuitted()) {
      out["exit_requested"] = true;
      return return_type::critical;
    }
    if (_tui_screen.has_data()) {
      out = _tui_screen.get_data();
      return return_type::success;
    }
    return return_type::retry;
  }

  void set_params(void const *params) override {
    Source::set_params(params);
    _params.merge_patch(*(json *)params);
    
    _tui_screen.load_settings();
    _tui_screen.prepare_tui(_screen);
    _loop = unique_ptr<Loop>(new Loop(&_screen, _tui_screen.component));
  }

  map<string, string> info() override { 
    return {}; 
  };

private:
  TuiScreen _tui_screen{18};
  // Define the fields that are used to store internal resources
  ScreenInteractive _screen = ScreenInteractive::Fullscreen();
  unique_ptr<Loop> _loop;
};


/*
  ____  _             _             _      _
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|
                |___/
Enable the class as plugin
*/
INSTALL_SOURCE_DRIVER(TuiPlugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/

using namespace ftxui;

int main(int argc, char const *argv[]) {
  TuiPlugin plugin;
  json output = json(), params = json();

  // Set example values to params
  params["test"] = "value";

  // Set the parameters
  plugin.set_params(&params);

  // Process data
  while(true) {
    // Get the output
    auto rt = plugin.get_output(output);
    if (rt == return_type::critical) break;
    if (rt == return_type::success) 
      cout << output.dump() << endl;
    this_thread::sleep_for(10ms);
  }

  // Produce output
  cout << "Output: " << output << endl;

  return 0;
}
